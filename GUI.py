
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter.filedialog import askopenfilename
from tkinter import filedialog
import pymsgbox
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Checkbutton, messagebox
from tkinter import *
from Bio.SeqIO.FastaIO import SimpleFastaParser
import pandas as pd
import csv
import webbrowser
from tkinter.tix import *

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

pd.options.mode.chained_assignment = None  # default='warn'

    # img=Image.open(path_MS2) # read the image file
    # img=img.resize((497,355)) # new width & height
    # img=ImageTk.PhotoImage(img)
    # e1 =Label(optical_image_frame)
    # e1.pack(side=TOP)
    # e1.image = img # keep a reference! by attaching it to a widget attribute
    # e1['image']=img # Show Image 


window = Tk()

window.geometry("778x870")
window.configure(bg = "#423C56")
window.title('EndoGenius')

# window.state('zoomed')
#window.iconbitmap(r"EndoGenius.ico")

input_path_MS2 = StringVar()
input_path_format_MS2 = StringVar()
mz_range_min = StringVar()
mz_range_max = StringVar()
min_intensity = StringVar()
max_precursor_z = StringVar()
max_fragment_z = StringVar()
database_csv_path = StringVar()
target_peptide_list_path = StringVar()
fasta_path = StringVar()
precursor_err = StringVar()
fragment_err = StringVar()
max_mods_pep = StringVar()
min_motif_len = StringVar()
min_motif_len.set('3')
amid_var = IntVar()
ox_var = IntVar()
pgE_var = IntVar()
sulf_var = IntVar()
pgQ_var = IntVar()
motif_db_path = StringVar()
confident_coverage_threshold = StringVar()
standard_err = StringVar()
max_adjacent_swapped_AAs = StringVar()
FDR_threshold = StringVar()
max_swapped_AA = StringVar()
output_dir_path = StringVar()
eg_threshold = StringVar()


# input_path_MS2.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\fasta_formatted\2021_0817_CoG_1.ms2")
input_path_format_MS2.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\db_formatted\2021_0817_CoG_1.txt")
mz_range_min.set('50')
mz_range_max.set('3000')
min_intensity.set('1000')
max_precursor_z.set('8')
max_fragment_z.set('4')
database_csv_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\db_formatted\short_db_w_decoy.csv")
target_peptide_list_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\db_formatted\short_target_list.csv")
# fasta_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\fasta_formatted\short_fasta.fasta")
precursor_err.set('20')
fragment_err.set('0.02')
max_mods_pep.set('0')
# amid_var.set(1)
# ox_var.set(1)
# pgE_var.set(1)
# sulf_var.set(1)
# pgQ_var.set(1)
motif_db_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\db_formatted\motif_db_20230621.csv")
confident_coverage_threshold.set('70')
standard_err.set('0.1')
max_adjacent_swapped_AAs.set('2')
# FDR_threshold.set('0.10')
max_swapped_AA.set('1')
output_dir_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_output\EndoGenius_v1.0.7\iteration1")
eg_threshold.set('1000')

def openweb_liweb():
    new = 1
    url = "https://www.lilabs.org/resources"
    webbrowser.open(url,new=new)

def openweb_git():
    new = 1
    url = "https://github.com/lingjunli-research"
    webbrowser.open(url,new=new)

def openweb_user_manual():
    new = 1
    url = "https://docs.google.com/document/d/e/2PACX-1vRKyqvEpRbcrYHWTq1CLRImNfC6f_gxaXnKgH2I_ZX_E-kSA2PvUiy4d8kMddS2B8PcEwsLAngMcjvg/pub"
    webbrowser.open(url,new=new)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def raw_MS2_path():
    path_MS2 = askopenfilename(filetypes=[(".MS2 Files",("*.MS2"))]) 
    input_path_MS2.set(path_MS2)

def formatted_MS2_path():
    path_format_MS2 = askopenfilename(filetypes=[("Text Files",("*.txt"))]) 
    input_path_format_MS2.set(path_format_MS2)
    
def prebuilt_db_path():
    path_prebuilt_db = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
    database_csv_path.set(path_prebuilt_db)
    
def target_list_path_get():
    path_target_list = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
    target_peptide_list_path.set(path_target_list)

def fasta_db_get():
    path_fasta = askopenfilename(filetypes=[("FASTA Files",("*.fasta"))]) 
    fasta_path.set(path_fasta)
    
def motif_db_get():
    path_motif_db = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
    motif_db_path.set(path_motif_db)
    
def output_path_get():
    path_out = filedialog.askdirectory() 
    output_dir_path.set(path_out)

def make_target_list():
    fasta_path_get = fasta_path.get()
    output_folder = output_dir_path.get()
    
    fasta_to_df = []

    with open(fasta_path_get) as fasta_file:  # Will close handle cleanly
        for title, sequence in SimpleFastaParser(fasta_file):
            fasta_to_df.append(sequence)
            
    target_list = pd.DataFrame()
    target_list['Sequence'] = fasta_to_df

    file_path = output_folder + '\\target_list.csv'
    with open(file_path,'w',newline='') as filec:
            writerc = csv.writer(filec)
            target_list.to_csv(filec,index=False)
    return file_path

def make_db():
    fasta_path_get = fasta_path.get()
    output_folder = output_dir_path.get()
    
    variable_mod_dict = {}
    
    amid_var_val = amid_var.get()
    ox_var_val = ox_var.get()
    pgE_var_val = pgE_var.get()
    sulf_var_val = sulf_var.get()
    pgQ_var_val = pgQ_var.get()
    
    if amid_var_val == 0:
        pass
    elif amid_var_val == 1:
        variable_mod_dict['-Amidated'] = True
        
    if ox_var_val == 0:
        pass
    elif ox_var_val == 1:
        variable_mod_dict['(Oxidation)'] = ['M']
        
    if pgE_var_val == 0:
        pass
    elif pgE_var_val == 1:
        variable_mod_dict['(Glu->pyro-Glu)'] = ['ntermE']
    
    if pgQ_var_val == 0:
        pass
    elif pgQ_var_val == 1:
        variable_mod_dict['(Gln->pyro-Glu)'] = ['ntermQ']
        
    if sulf_var_val == 0:
        pass
    elif sulf_var_val == 1:
        variable_mod_dict['(Sulfo)'] = ['Y']
    from db_generator import make_a_DB
    max_mods_number = int(max_mods_pep.get())
    database_generated = make_a_DB(variable_mod_dict,fasta_path_get,output_folder,max_mods_number)
    return database_generated
    

def checked_clear_begin_search(predefined_db_path,output_parent_directory,raw_file_formatted_path,target_path):
    from database_search import raw_file_detail_extraction
    from database_search import launch_db_search_pt1
    from PSM_assignment import PSM_assignment_execute
    from motif_search import start_motif_search
    from results_metric_extract import results_metric_extract_start
    from metric_handling import metric_handling_apply
    from target_decoy_assess import target_decoy_apply
    from EndoGenius_Score_Apply import endogenius_apply
    
    details = raw_file_detail_extraction(raw_file_formatted_path,output_parent_directory)
    sample_name = details[0]
    sample_output_directory = details[1]

    precursor_error_cutoff = float(precursor_err.get())
    fragment_error_cutoff = float(fragment_err.get())
    min_mz = float(mz_range_min.get())
    min_intensity_pass = int(min_intensity.get())
    standard_err_percent = float(standard_err.get())
    
    amidation = amid_var.get()

    oxidation_M_status = ox_var.get()

    pyroglu_E_status = pgE_var.get()

    pyroglu_Q_status = pgQ_var.get()

    sulfo_Y_status = sulf_var.get()

    max_modifications = int(max_mods_pep.get())
    
    if len(input_path_format_MS2.get()) > 0:
        choose_mzml_directory = input_path_format_MS2.get()

    else:
        choose_mzml_directory = input_path_MS2.get()

    first_pass_db = launch_db_search_pt1(predefined_db_path,output_parent_directory,choose_mzml_directory,raw_file_formatted_path,precursor_error_cutoff,
                             fragment_error_cutoff,min_mz,min_intensity_pass,standard_err_percent,amidation,oxidation_M_status,
                             pyroglu_E_status,pyroglu_Q_status,sulfo_Y_status,max_modifications,sample_output_directory)
    print('First pass DB complete')
    confident_seq_cov = float(confident_coverage_threshold.get())
    max_adjacent_swapped_AA_get = int(max_adjacent_swapped_AAs.get())
    min_motif_len_get = int(min_motif_len.get())
    num_sub_AAs = int(max_swapped_AA.get())
    
    motif_path = motif_db_path.get()
    
    first_pass_PSM_assign = PSM_assignment_execute(standard_err_percent,confident_seq_cov,max_adjacent_swapped_AA_get,min_motif_len_get,
                                                   fragment_error_cutoff,num_sub_AAs,output_parent_directory,target_path,motif_path,sample_output_directory)
    print('First pass PSM assign complete')
    first_pass_motif_search = start_motif_search(output_parent_directory,motif_path,sample_output_directory)
    print('First pass motif search complete')
    first_pass_weighting_extract = results_metric_extract_start(output_parent_directory,output_parent_directory,sample_output_directory)
    print('First pass weighting extract complete')
    first_pass_metric_apply = metric_handling_apply(first_pass_weighting_extract,output_parent_directory,sample_output_directory)
    print('First pass metric apply complete')
    fdr_cutoff = str(FDR_threshold.get())
    eg_cutoff = str(eg_threshold.get())
    
    if len(fdr_cutoff)>0 and len(eg_cutoff)>0:
        messagebox.showerror('Input Error', 'Must input either an FDR cutoff \n or EndoGenius Score Cutoff\n not both')
    
    if len(fdr_cutoff)>0:
        fdr_cutoff_float = float(FDR_threshold.get())
        first_pass_TD = target_decoy_apply(first_pass_metric_apply,target_path,output_parent_directory,fdr_cutoff_float,sample_output_directory,raw_file_formatted_path)
    elif len(eg_cutoff)>0:
        eg_cutoff_float = float(eg_threshold.get())
        first_pass_TD = endogenius_apply(first_pass_metric_apply,target_path,output_parent_directory,eg_cutoff_float,sample_output_directory,raw_file_formatted_path)
    else:
        messagebox.showerror('Input Error', 'Must input either an FDR cutoff \n or EndoGenius Score Cutoff')
    print('First pass target-decoy complete')


def begin_search_confirmed():
    predefined_db_path = database_csv_path.get()
    if len(database_csv_path.get()) > 0:
        if len(target_peptide_list_path.get()) == 0:
            messagebox.showerror('Input Error', 'Target list not specified')
        if len(target_peptide_list_path.get()) > 0:
            if len(input_path_format_MS2.get()) > 0:
                predefined_db_path = database_csv_path.get()
                output_parent_directory = output_dir_path.get()
                raw_file_formatted_path = input_path_format_MS2.get()
                target_path = target_peptide_list_path.get()
                checked_clear_begin_search(predefined_db_path,output_parent_directory,raw_file_formatted_path,target_path)
                pymsgbox.alert('Your database search is complete','Status Update')
            elif len(input_path_format_MS2.get()) == 0:
                if len(input_path_MS2.get()) == 0:
                    messagebox.showerror('Input Error', 'No spectra file indicated')
                if len(input_path_MS2.get()) > 0:
                    from format_MS2_file_RT_IIT import format_raw_MS2
                    unformatted_spectra_path = input_path_MS2.get()
                    output_parent_directory = output_dir_path.get()
                    raw_file_formatted_path = format_raw_MS2(unformatted_spectra_path,output_parent_directory)
                    predefined_db_path = database_csv_path.get()
                    target_path = target_peptide_list_path.get()
                    checked_clear_begin_search(predefined_db_path,output_parent_directory,raw_file_formatted_path,target_path)
                    pymsgbox.alert('Your database search is complete','Status Update')
                
    if len(database_csv_path.get()) == 0:
        new_db_path = make_db()
    
        if len(input_path_format_MS2.get()) > 0:
            output_parent_directory = output_dir_path.get()
            raw_file_formatted_path = input_path_format_MS2.get()
            target_path = make_target_list()
            checked_clear_begin_search(new_db_path,output_parent_directory,raw_file_formatted_path,target_path)
            pymsgbox.alert('Your database search is complete','Status Update')
        if len(input_path_format_MS2.get()) == 0:
            from format_MS2_file_RT_IIT import format_raw_MS2
            unformatted_spectra_path = input_path_MS2.get()
            output_parent_directory = output_dir_path.get()
            raw_file_formatted_path = format_raw_MS2(unformatted_spectra_path,output_parent_directory)
            target_path = make_target_list()
            checked_clear_begin_search(new_db_path,output_parent_directory,raw_file_formatted_path,target_path)
            pymsgbox.alert('Your database search is complete','Status Update')

def begin_search():
    # mz_min_check = mz_range_min.get()
    # mz_max_check= mz_range_max.get()
    # intensity_check= min_intensity.get()
    # precz_check= max_precursor_z.get()
    # fragz_check= max_fragment_z.get()
    # prec_err_check= precursor_err.get()
    # frag_err_check= fragment_err.get()
    # maxmods_check= max_mods_pep.get()
    # motifDB_check= motif_db_path.get()
    # cov_check= confident_coverage_threshold.get()
    # output_directory_check= output_dir_path.get()
    
    # if len(mz_min_check)==0:
    #     messagebox.showerror('Input Error', 'Input minimum m/z value')
    # if len(mz_max_check)==0:
    #     messagebox.showerror('Input Error', 'Input maximum m/z value')
    # if len(intensity_check)==0:
    #     messagebox.showerror('Input Error', 'Input minimum intensity value')
    # if len(precz_check)==0:
    #     messagebox.showerror('Input Error', 'Input maximum precursor charge value')
    # if len(fragz_check)==0:
    #     messagebox.showerror('Input Error', 'Input maximum fragment charge value')
    # if len(prec_err_check)==0:
    #     messagebox.showerror('Input Error', 'Input maximum precursor error value')
    # if len(frag_err_check)==0:
    #     messagebox.showerror('Input Error', 'Input maximum fragment error value')
    # if len(maxmods_check)==0:
    #     messagebox.showerror('Input Error', 'Input maximum # modifications per peptide\n\nIf no modifications selected, input 0')
    # if len(motifDB_check)==0:
    #     messagebox.showerror('Input Error', 'Select motif database')
    # if len(cov_check)==0:
    #     messagebox.showerror('Input Error', 'Input confidence coverage threshold')
    # if len(output_directory_check)==0:
    #     messagebox.showerror('Input Error', 'Select output folder')
        
    # rawMS2_check= input_path_MS2.get()
    # formatMS2_check= input_path_format_MS2.get()
    # if len(rawMS2_check)==0 and len(formatMS2_check)==0:
    #     messagebox.showerror('Input Error', 'Input spectral file')
    # if len(rawMS2_check)>0 and len(formatMS2_check)>0:
    #     messagebox.showerror('Input Error', 'Input either raw or formatted spectral file, not both')
    
    # fasta_check= fasta_path.get()
    # formatDB_check= database_csv_path.get()
    # if len(fasta_check)==0 and len(formatDB_check)==0:
    #     messagebox.showerror('Input Error', 'Input database file')
    # if len(fasta_check)>0 and len(formatDB_check)>0:
    #     messagebox.showerror('Input Error', 'Input either raw .fasta file or formatted .csv database file, not both')
    
    # if len(rawMS2_check)>0:
    #     if '_formatted.ms2' in rawMS2_check:
    #         mzml_path_check = rawMS2_check.replace('_formatted.ms2','.mzML')
    #     elif '_formatted.txt' in rawMS2_check:
    #         mzml_path_check = rawMS2_check.replace('_formatted.txt','.mzML')
    #     elif '.txt' in rawMS2_check:
    #         mzml_path_check = rawMS2_check.replace('.txt','.mzML')
    #     elif '.ms2' in rawMS2_check:
    #         mzml_path_check = rawMS2_check.replace('.ms2','.mzML')
        
    #     mzml_path_valid_check = os.path.isfile(mzml_path_check)
    #     if mzml_path_valid_check == False:
    #         messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
    #     else:
    #         pass
    
    # elif len(formatMS2_check)>0:
    #     if '_formatted.ms2' in formatMS2_check:
    #         mzml_path_check = formatMS2_check.replace('_formatted.ms2','.mzML')
    #     elif '_formatted.txt' in formatMS2_check:
    #         mzml_path_check = formatMS2_check.replace('_formatted.txt','.mzML')
    #     elif '.txt' in formatMS2_check:
    #         mzml_path_check = formatMS2_check.replace('.txt','.mzML')
    #     elif '.ms2' in formatMS2_check:
    #         mzml_path_check = formatMS2_check.replace('.ms2','.mzML')
    #     if mzml_path_valid_check == False:
    #         messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
    #     else:
    #         pass
        
    # fdr_check= FDR_threshold.get()
    # eg_check= EG_threshold.get()
    # if len(fdr_check)==0 and len(eg_check)==0:
    #     messagebox.showerror('Input Error', 'Input either FDR threshold or EndoGenius score threshold')
    # if len(fdr_check)>0 and len(eg_check)>0:
    #     messagebox.showerror('Input Error', 'Input either FDR cutoff or EndoGenius score cutoff, not both')
        
    # if len(database_csv_path.get()) > 0:
    #     if len(target_peptide_list_path.get()) == 0:
    #         messagebox.showerror('Input Error', 'Target list not specified')


    
    
    
    
    # output_parent_directory = output_dir_path.get()
    # raw_file_formatted_path = input_path_format_MS2.get()
    # target_path = target_peptide_list_path.get()
    
    # checked_clear_begin_search(predefined_db_path,output_parent_directory,raw_file_formatted_path,target_path)
    mz_min_check = mz_range_min.get()
    mz_max_check= mz_range_max.get()
    intensity_check= min_intensity.get()
    precz_check= max_precursor_z.get()
    fragz_check= max_fragment_z.get()
    prec_err_check= precursor_err.get()
    frag_err_check= fragment_err.get()
    maxmods_check= max_mods_pep.get()
    motifDB_check= motif_db_path.get()
    cov_check= confident_coverage_threshold.get()
    output_directory_check= output_dir_path.get()
    rawMS2_check= input_path_MS2.get()
    formatMS2_check= input_path_format_MS2.get()
    fasta_check= fasta_path.get()
    formatDB_check= database_csv_path.get()
    fdr_check= FDR_threshold.get()
    eg_check= eg_threshold.get()



    if len(mz_min_check)==0:
        messagebox.showerror('Input Error', 'Input minimum m/z value')
    if len(mz_min_check)>0:
        if len(mz_max_check)==0:
            messagebox.showerror('Input Error', 'Input maximum m/z value')
        elif len(mz_max_check)>0:
            if len(intensity_check)==0:
                messagebox.showerror('Input Error', 'Input minimum intensity value')
            elif len(intensity_check)>0:
                if len(precz_check)==0:
                    messagebox.showerror('Input Error', 'Input maximum precursor charge value')
                elif len(precz_check)>0:
                    if len(fragz_check)==0:
                        messagebox.showerror('Input Error', 'Input maximum fragment charge value')
                    elif len(fragz_check)>0:
                        if len(prec_err_check)==0:
                            messagebox.showerror('Input Error', 'Input maximum precursor error value')
                        elif len(prec_err_check)>0:
                            if len(frag_err_check)==0:
                                messagebox.showerror('Input Error', 'Input maximum fragment error value')
                            elif len(frag_err_check)>0:
                                if len(maxmods_check)==0:
                                    messagebox.showerror('Input Error', 'Input maximum # modifications per peptide\n\nIf no modifications selected, input 0')
                                elif len(maxmods_check)>0:
                                    if len(motifDB_check)==0:
                                        messagebox.showerror('Input Error', 'Select motif database')
                                    elif len(motifDB_check)>0:
                                        if len(cov_check)==0:
                                            messagebox.showerror('Input Error', 'Input confidence coverage threshold')
                                        elif len(cov_check)>0:
                                            if len(output_directory_check)==0:
                                                messagebox.showerror('Input Error', 'Select output folder')
                                            elif len(output_directory_check)>0:
                                                if len(rawMS2_check)==0 and len(formatMS2_check)==0:
                                                    messagebox.showerror('Input Error', 'Input spectral file')
                                                elif len(rawMS2_check)>0 and len(formatMS2_check)>0:
                                                    messagebox.showerror('Input Error', 'Input either raw or formatted spectral file, not both')
                                                elif (len(rawMS2_check)>0 and len(formatMS2_check)==0) or (len(rawMS2_check)==0 and len(formatMS2_check)>0):
                                                        if len(fasta_check)==0 and len(formatDB_check)==0:
                                                            messagebox.showerror('Input Error', 'Input database file')
                                                        elif len(fasta_check)>0 and len(formatDB_check)>0:
                                                            messagebox.showerror('Input Error', 'Input either raw .fasta file or formatted .csv database file, not both')
                                                        elif (len(fasta_check)>0 and len(formatDB_check)==0) or (len(fasta_check)==0 and len(formatDB_check)>0):
                                                                if len(rawMS2_check)>0:
                                                                    if '_formatted.ms2' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('_formatted.ms2','.mzML')
                                                                    elif '_formatted.txt' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('_formatted.txt','.mzML')
                                                                    elif '.txt' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('.txt','.mzML')
                                                                    elif '.ms2' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('.ms2','.mzML')
                                                                    else:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    
                                                                    mzml_path_valid_check = os.path.isfile(mzml_path_check)
                                                                    if mzml_path_valid_check == False:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    if mzml_path_valid_check == True:
                                                                        if len(fdr_check)==0 and len(eg_check)==0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR threshold or EndoGenius score threshold')
                                                                        elif len(fdr_check)>0 and len(eg_check)>0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR cutoff or EndoGenius score cutoff, not both')
                                                                        elif(len(fdr_check)>0 and len(eg_check)==0) or (len(fdr_check)==0 and len(eg_check)>0): 
                                                                                if len(database_csv_path.get()) > 0:
                                                                                    if len(target_peptide_list_path.get()) == 0:
                                                                                        messagebox.showerror('Input Error', 'Target list not specified')
                                                                                    else:
                                                                                        begin_search_confirmed()
                                                                                else:
                                                                                    begin_search_confirmed()
                                                                elif len(formatMS2_check)>0:
                                                                    if '_formatted.ms2' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('_formatted.ms2','.mzML')
                                                                    elif '_formatted.txt' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('_formatted.txt','.mzML')
                                                                    elif '.txt' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('.txt','.mzML')
                                                                    elif '.ms2' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('.ms2','.mzML')
                                                                    else:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    
                                                                    mzml_path_valid_check = os.path.isfile(mzml_path_check)
                                                                    if mzml_path_valid_check == False:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    if mzml_path_valid_check == True:
                                                                        if len(fdr_check)==0 and len(eg_check)==0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR threshold or EndoGenius score threshold')
                                                                        elif len(fdr_check)>0 and len(eg_check)>0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR cutoff or EndoGenius score cutoff, not both')
                                                                        elif(len(fdr_check)>0 and len(eg_check)==0) or (len(fdr_check)==0 and len(eg_check)>0):
                                                                                if len(database_csv_path.get()) > 0:
                                                                                    if len(target_peptide_list_path.get()) == 0:
                                                                                        messagebox.showerror('Input Error', 'Target list not specified')
                                                                                    else:
                                                                                        begin_search_confirmed()
                                                                                else:
                                                                                    begin_search_confirmed()
                                                                                    
    

menubar = Menu(window)
filemenu = Menu(menubar, tearoff=0)
# filemenu.add_command(label="New", command=donothing)
# filemenu.add_command(label="Open", command=donothing)
# filemenu.add_command(label="Save", command=donothing)
#filemenu.add_separator()
filemenu.add_command(label="Exit", command=window.quit)
menubar.add_cascade(label="File", menu=filemenu)

helpmenu = Menu(menubar, tearoff=0)
helpmenu.add_command(label="Li Lab Website", command=openweb_liweb)
helpmenu.add_command(label="Li Lab GitHub", command=openweb_git)
helpmenu.add_command(label="User manual", command=openweb_user_manual)
menubar.add_cascade(label="Help", menu=helpmenu)

# toolmenu = Menu(menubar, tearoff=0)
# toolmenu.add_command(label="Step evaluate tool")
# menubar.add_cascade(label="Tools", menu=toolmenu)

window.config(menu=menubar)

canvas = Canvas(
    window,
    bg = "#423C56",
    height = 883,
    width = 778,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    10.0,
    200.0,
    773.0,
    257.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    20.0,
    216.0,
    anchor="nw",
    text="m/z range",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    171.0,
    219.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    270.0,
    210.0,
    anchor="nw",
    text="minimum\nintensity",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

canvas.create_text(
    420.0,
    210.0,
    anchor="nw",
    text="max precursor\ncharge",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

canvas.create_text(
    600.0,
    210.0,
    anchor="nw",
    text="max fragment\ncharge",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

canvas.create_text(
    5.0,
    166.0,
    anchor="nw",
    text="2. Spectral processing",
    fill="#FFFFFF",
    font=("Inter", 24 * -1)
)

canvas.create_text(
    5.0,
    76.0,
    anchor="nw",
    text="1. Spectral input",
    fill="#FFFFFF",
    font=("Inter", 24 * -1)
)

canvas.create_rectangle(
    10.0,
    109.0,
    369.0,
    166.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    32.0,
    128.0,
    anchor="nw",
    text="Raw .MS2",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_rectangle(
    411.0,
    109.0,
    770.0,
    166.0,
    fill="#D9D9D9",
    outline="")

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    600.0,
    138.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=input_path_format_MS2
)

entry_1.place(
    x=527.0,
    y=123.0,
    width=146.0,
    height=28.0
)

canvas.create_text(
    440.0,
    119.0,
    anchor="nw",
    text="Formatted\nRaw .MS2",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

canvas.create_text(
    332.0,
    125.0,
    anchor="nw",
    text="or",
    fill="#FFFFFF",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    5.0,
    582.0,
    anchor="nw",
    text="5. PSM assignment",
    fill="#FFFFFF",
    font=("Inter", 24 * -1)
)

canvas.create_rectangle(
    10.0,
    613.0,
    770.0,
    715.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    14.0,
    626.0,
    anchor="nw",
    text="Motif database",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    425.0,
    626.0,
    anchor="nw",
    text="Confident coverage threshold (%)",
    fill="#000000",
    font=("Inter", 16 * -1)
)

# canvas.create_text(
#     22.0,
#     668.0,
#     anchor="nw",
#     text="Standard\nerror %",
#     fill="#000000",
#     font=("Inter", 16 * -1),
#     justify='center'
# )

# canvas.create_text(
#     180.0,
#     668.0,
#     anchor="nw",
#     text="EndoGenius\nScore Threshold",
#     fill="#000000",
#     font=("Inter", 16 * -1),
#     justify='center'
# )

canvas.create_text(
    5.0,
    720.0,
    anchor="nw",
    text="6. Export results",
    fill="#FFFFFF",
    font=("Inter", 24 * -1)
)

canvas.create_rectangle(
    10.0,
    749.0,
    411.0,
    808.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    29.0,
    769.0,
    anchor="nw",
    text="Output directory",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    5.0,
    265.0,
    anchor="nw",
    text="3. Database definition",
    fill="#FFFFFF",
    font=("Inter", 24 * -1)
)

canvas.create_rectangle(
    10.0,
    315.0,
    369.0,
    436.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    32.0,
    334.0,
    anchor="nw",
    text="Database",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    21.0,
    388.0,
    anchor="nw",
    text="Target\npeptide list",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

canvas.create_text(
    338.0,
    335.0,
    anchor="nw",
    text="or",
    fill="#FFFFFF",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    7.0,
    293.0,
    anchor="nw",
    text="Pre-built database",
    fill="#FFFFFF",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    420.0,
    293.0,
    anchor="nw",
    text="Generate from .fasta",
    fill="#FFFFFF",
    font=("Inter", 16 * -1)
)

canvas.create_rectangle(
    414.0,
    316.0,
    773.0,
    374.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    436.0,
    335.0,
    anchor="nw",
    text="Database",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_rectangle(
    10.0,
    466.0,
    773.0,
    579.0,
    fill="#D9D9D9",
    outline="")

canvas.create_text(
    25.0,
    489.0,
    anchor="nw",
    text="Precursor error (ppm)",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    14.0,
    540.0,
    anchor="nw",
    text="Modifications",
    fill="#000000",
    font=("Inter", 16 * -1)
)

amid_check = Checkbutton(canvas, onvalue=1, offvalue=0, variable=amid_var, bg= '#D9D9D9')
amid_check.place(x = 130, y = 538)

canvas.create_text(
    158.0,
    542.0,
    anchor="nw",
    text="C-terminal amidation",
    fill="#000000",
    font=("Inter SemiBold", 12 * -1)
)

canvas.create_text(
    280.0,
    489.0,
    anchor="nw",
    text="Fragment error (Da)",
    fill="#000000",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    550.0,
    489.0,
    anchor="nw",
    text="Max mods/peptide",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

canvas.create_text(
    5.0,
    436.0,
    anchor="nw",
    text="4. Database search",
    fill="#FFFFFF",
    font=("Inter", 24 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=begin_search,
    relief="flat"
)
button_1.place(
    x=9.0,
    y=820.0,
    width=401.0,
    height=59.0
)

canvas.create_text(
    5.0,
    0.0,
    anchor="nw",
    text="EndoGenius",
    fill="#FFFFFF",
    font=("Inter", 64 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    617.0,
    799.0,
    image=image_image_1
)

canvas.create_text(
    390.0,
    668.0,
    anchor="nw",
    text="FDR\nThreshold",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

canvas.create_text(
    550.0,
    668.0,
    anchor="nw",
    text="EndoGenius Score\nThreshold",
    fill="#000000",
    font=("Inter", 16 * -1),
    justify='center'
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=formatted_MS2_path,
    relief="flat"
)
button_2.place(
    x=678.0,
    y=123.0,
    width=77.21710205078125,
    height=30.0
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    204.0,
    138.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable = input_path_MS2
)
entry_2.place(
    x=131.0,
    y=123.0,
    width=146.0,
    height=28.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=raw_MS2_path,
    relief="flat"
)
button_3.place(
    x=282.0,
    y=123.0,
    width=77.21710205078125,
    height=30.0
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    241.0,
    779.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=output_dir_path
)

entry_3.place(
    x=168.0,
    y=764.0,
    width=146.0,
    height=28.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=output_path_get,
    relief="flat"
)
button_4.place(
    x=319.0,
    y=764.0,
    width=77.21710205078125,
    height=30.0
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    604.0,
    344.0,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=fasta_path
)

entry_4.place(
    x=531.0,
    y=329.0,
    width=146.0,
    height=28.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=fasta_db_get,
    relief="flat"
)
button_5.place(
    x=682.0,
    y=329.0,
    width=77.21710205078125,
    height=30.0
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    194.0,
    344.0,
    image=entry_image_5
)
entry_5 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=database_csv_path
)

entry_5.place(
    x=121.0,
    y=329.0,
    width=146.0,
    height=28.0
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=prebuilt_db_path,
    relief="flat"
)
button_6.place(
    x=272.0,
    y=329.0,
    width=77.21710205078125,
    height=30.0
)

entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    194.0,
    403.0,
    image=entry_image_6
)
entry_6 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0
)
entry_6.insert(END,'entry_6')
entry_6.place(
    x=121.0,
    y=388.0,
    width=146.0,
    height=28.0
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_7 clicked"),
    relief="flat"
)
button_7.place(
    x=272.0,
    y=388.0,
    width=77.21710205078125,
    height=30.0
)

entry_image_7 = PhotoImage(
    file=relative_to_assets("entry_7.png"))
entry_bg_7 = canvas.create_image(
    194.0,
    403.0,
    image=entry_image_7
)
entry_7 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=target_peptide_list_path
)

entry_7.place(
    x=121.0,
    y=388.0,
    width=146.0,
    height=28.0
)

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=target_list_path_get,
    relief="flat"
)
button_8.place(
    x=272.0,
    y=388.0,
    width=77.21710205078125,
    height=30.0
)

entry_image_8 = PhotoImage(
    file=relative_to_assets("entry_8.png"))
entry_bg_8 = canvas.create_image(
    214.0,
    639.0,
    image=entry_image_8
)
entry_8 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=motif_db_path
)

entry_8.place(
    x=141.0,
    y=624.0,
    width=146.0,
    height=28.0
)

# entry_image_9 = PhotoImage(
#     file=relative_to_assets("entry_9.png"))
# entry_bg_9 = canvas.create_image(
#     127.5,
#     685.0,
#     image=entry_image_9
# )
# entry_9 = Entry(
#     bd=0,
#     bg="#FFFFFF",
#     highlightthickness=0,
#     textvariable=standard_err
# )

# entry_9.place(
#     x=101.0,
#     y=670.0,
#     width=53.0,
#     height=28.0
# )

entry_image_10 = PhotoImage(
    file=relative_to_assets("entry_10.png"))
entry_bg_10 = canvas.create_image(
    738.5,
    229.0,
    image=entry_image_10
)
entry_10 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable = max_fragment_z
)

entry_10.place(
    x=712.0,
    y=214.0,
    width=53.0,
    height=28.0
)

entry_image_11 = PhotoImage(
    file=relative_to_assets("entry_11.png"))
entry_bg_11 = canvas.create_image(
    563.5,
    228.0,
    image=entry_image_11
)
entry_11 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable = max_precursor_z
)

entry_11.place(
    x=537.0,
    y=213.0,
    width=53.0,
    height=28.0
)

entry_image_12 = PhotoImage(
    file=relative_to_assets("entry_12.png"))
entry_bg_12 = canvas.create_image(
    378.5,
    228.0,
    image=entry_image_12
)
entry_12 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable = min_intensity
)

entry_12.place(
    x=352.0,
    y=213.0,
    width=53.0,
    height=28.0
)

entry_image_13 = PhotoImage(
    file=relative_to_assets("entry_13.png"))
entry_bg_13 = canvas.create_image(
    222.5,
    228.0,
    image=entry_image_13
)
entry_13 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=mz_range_max
)

entry_13.place(
    x=196.0,
    y=213.0,
    width=53.0,
    height=28.0
)

entry_image_14 = PhotoImage(
    file=relative_to_assets("entry_14.png"))
entry_bg_14 = canvas.create_image(
    132.5,
    228.0,
    image=entry_image_14
)
entry_14 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable= mz_range_min
)

entry_14.place(
    x=106.0,
    y=213.0,
    width=53.0,
    height=28.0
)

entry_image_15 = PhotoImage(
    file=relative_to_assets("entry_15.png"))
entry_bg_15 = canvas.create_image(
    711.5,
    498.0,
    image=entry_image_15
)
entry_15 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable= max_mods_pep
)

entry_15.place(
    x=685.0,
    y=483.0,
    width=53.0,
    height=28.0
)

entry_image_16 = PhotoImage(
    file=relative_to_assets("entry_16.png"))
entry_bg_16 = canvas.create_image(
    465.5,
    498.0,
    image=entry_image_16
)
entry_16 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=fragment_err
)

entry_16.place(
    x=439.0,
    y=483.0,
    width=53.0,
    height=28.0
)

entry_image_17 = PhotoImage(
    file=relative_to_assets("entry_17.png"))
entry_bg_17 = canvas.create_image(
    215.5,
    498.0,
    image=entry_image_17
)
entry_17 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=precursor_err
)

entry_17.place(
    x=189.0,
    y=483.0,
    width=53.0,
    height=28.0
)

entry_image_18 = PhotoImage(
    file=relative_to_assets("entry_18.png"))
entry_bg_18 = canvas.create_image(
    711.5,
    636.0,
    image=entry_image_18
)
entry_18 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=confident_coverage_threshold
)

entry_18.place(
    x=685.0,
    y=621.0,
    width=53.0,
    height=28.0
)

# entry_image_19 = PhotoImage(
#     file=relative_to_assets("entry_19.png"))
# entry_bg_19 = canvas.create_image(
#     344.5,
#     684.0,
#     image=entry_image_19
# )
# entry_19 = Entry(
#     bd=0,
#     bg="#FFFFFF",
#     highlightthickness=0,
#     textvariable=max_adjacent_swapped_AAs
# )

# entry_19.place(
#     x=318.0,
#     y=669.0,
#     width=53.0,
#     height=28.0
# )

entry_image_20 = PhotoImage(
    file=relative_to_assets("entry_20.png"))
entry_bg_20 = canvas.create_image(
    498.5,
    684.0,
    image=entry_image_20
)
entry_20 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=FDR_threshold
)

entry_20.place(
    x=472.0,
    y=669.0,
    width=53.0,
    height=28.0
)

entry_image_21 = PhotoImage(
    file=relative_to_assets("entry_21.png"))
entry_bg_21 = canvas.create_image(
    711.5,
    684.0,
    image=entry_image_21
)
entry_21 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    textvariable=eg_threshold
)

entry_21.place(
    x=685.0,
    y=669.0,
    width=53.0,
    height=28.0
)

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
button_9 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=motif_db_get,
    relief="flat"
)
button_9.place(
    x=292.0,
    y=624.0,
    width=77.21710205078125,
    height=30.0
)

canvas.create_rectangle(
    138.0,
    544.0,
    156.0,
    562.0,
    fill="#D9D9D9",
    outline="")

ox_check = Checkbutton(canvas, onvalue=1, offvalue=0, variable=ox_var, bg= '#D9D9D9')
ox_check.place(x = 288, y = 538)

canvas.create_text(
    315.0,
    542.0,
    anchor="nw",
    text="Oxidation of M",
    fill="#000000",
    font=("Inter SemiBold", 12 * -1)
)

canvas.create_rectangle(
    295.0,
    544.0,
    313.0,
    562.0,
    fill="#D9D9D9",
    outline="")

pgE_check = Checkbutton(canvas, onvalue=1, offvalue=0, variable=pgE_var, bg= '#D9D9D9')
pgE_check.place(x = 410, y = 538)

canvas.create_text(
    437.0,
    542.0,
    anchor="nw",
    text="Pyro-glu from E",
    fill="#000000",
    font=("Inter SemiBold", 12 * -1)
)

canvas.create_rectangle(
    417.0,
    544.0,
    435.0,
    562.0,
    fill="#D9D9D9",
    outline="")

pgQ_check = Checkbutton(canvas, onvalue=1, offvalue=0, variable=pgQ_var, bg= '#D9D9D9')
pgQ_check.place(x = 645, y = 538)


canvas.create_text(
    672.0,
    542.0,
    anchor="nw",
    text="Pyro-glu from Q",
    fill="#000000",
    font=("Inter SemiBold", 12 * -1)
)

canvas.create_rectangle(
    652.0,
    544.0,
    670.0,
    562.0,
    fill="#D9D9D9",
    outline="")

sulfY_check = Checkbutton(canvas, onvalue=1, offvalue=0, variable=sulf_var, bg= '#D9D9D9')
sulfY_check.place(x = 535, y = 538)

canvas.create_text(
    562.0,
    542.0,
    anchor="nw",
    text="Sulfation of Y",
    fill="#000000",
    font=("Inter SemiBold", 12 * -1)
)

canvas.create_rectangle(
    542.0,
    544.0,
    560.0,
    562.0,
    fill="#D9D9D9",
    outline="")
window.resizable(False, False)
window.mainloop()
